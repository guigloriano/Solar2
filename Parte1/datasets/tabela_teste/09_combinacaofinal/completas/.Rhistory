P_AC = round(mean(P_AC, na.rm=TRUE), digits = 2),
P_DC = round(mean(P_DC, na.rm=TRUE), digits = 2),
I_AC = round(mean(I_AC, na.rm=TRUE), digits = 2),
V_AC = round(mean(V_AC, na.rm=TRUE), digits = 2),
I_DC = round(mean(I_DC, na.rm=TRUE), digits = 2),
V_DC = round(mean(V_DC, na.rm=TRUE), digits = 2),
massaPM4 = round(mean(massaPM4, na.rm=TRUE), digits = 2),
numPM4 = round(mean(numPM4, na.rm=TRUE), digits = 2),
massaPM10 = round(mean(massaPM10, na.rm=TRUE), digits = 2),
numPM10 = round(mean(numPM10, na.rm=TRUE), digits = 2),
rainfall = max(rainfall, na.rm=TRUE),
irr_est = round(mean(irr, na.rm=TRUE), digits = 2),
#DVr1 =  round(atan  (sum( -vento_vel * sind(vento_dir) ) / sum( -vento_vel * cosd(vento_dir) ) ), digits = 6),
#DVr2 =  round(atan2 (sum( -vento_vel * sind(vento_dir) ) , sum( -vento_vel * cosd(vento_dir) ) ), digits = 6),
#IDV1 =  round(1 + sin(atan  (sum( -vento_vel * sind(vento_dir) ) / sum( -vento_vel * cosd(vento_dir) ) ) - fi ), digits = 6),#-(-0.03313127))   )
#IDV2 =  round(1 + sin(atan2 (sum( -vento_vel * sind(vento_dir) ) , sum( -vento_vel * cosd(vento_dir) ) ) - fi ), digits = 6),
n = dplyr::n())
y <- gg
y$h <- NULL
y$m <- NULL
y$n <- NULL
# remove os NA e os -Inf dos datasets forcando eles a 0
is.na(y)<-sapply(y, is.infinite)
y[is.na(y)] <- 0
subAno <- substring(y$dia_mes_ano, 1, 4)
subMes <- substring(y$dia_mes_ano, 5, 6)
subDia <- substring(y$dia_mes_ano, 7, 8)
y$hora_minuto <- str_pad(y$hora_minuto, 6, pad = "0")
subHora <- substring(y$hora_minuto, 1, 2)
subMin  <- substring(y$hora_minuto, 3, 4)
subSeg  <- substring(y$hora_minuto, 5, 6)
if (as.numeric(subMin[1]) > 01 && as.numeric(subMin[1]) < 09 ){
subMin[1] <- "00"
}
TempoAmostra <- paste(subAno, "-", subMes, "-", subDia, " " ,subHora, ":", subMin, ":", subSeg ,sep = "")
y$Data <- strptime(TempoAmostra, format = "%Y-%m-%d %H:%M:%OS")
y$Data
subMin[1]
if (as.numeric(subMin[1]) >= 01 && as.numeric(subMin[1]) < 09 ){
subMin[1] <- "00"
}
subMin
source('D:/github/Tabelas_DynamoDB/csv_para_analise/07_agrupamento_10min.R')
source("D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R")
source("D:/github/Tabelas_DynamoDB/csv_para_analise/09_combinacaofinal.R")
source('D:/github/Tabelas_DynamoDB/csv_para_analise/99_todosDiasCsvs.R')
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
library(lubridate)
library(chron)
merge_caminho <- "D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\tabelas_teste\\06_combina_tabelas\\"
# bloco para leitura do caminho que os arquivos combinados
# serao salvos
pathMerge <- setwd(merge_caminho)
pathMerge <- setwd(merge_caminho)
namesMerge <- list.files(pattern = "*.csv")
filesMerge <- paste(pathMerge,  "/", namesMerge, sep = "")
# agrupamento dos arquivos em registros de 1hr
caminho_agrupamento <- "D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\tabelas_teste\\07_agrupamento_10min\\"
fi = 0
dias <- 1
# dias <- 100
dias <- 100
mergeDataset <- readr::read_csv(filesMerge[dias], col_types = cols(hora_minuto = col_character()))
mergeDataset
dias <- 80
mergeDataset <- readr::read_csv(filesMerge[dias], col_types = cols(hora_minuto = col_character()))
mergeDataset
dias <- 78
mergeDataset <- readr::read_csv(filesMerge[dias], col_types = cols(hora_minuto = col_character()))
mergeDataset
mergeDataset <- readr::read_csv(filesMerge[dias], col_types = cols(hora_minuto = col_character()))
g <- dplyr::group_by(mergeDataset, dia_mes_ano, h = substr(hora_minuto, 1, 2),
m = floor(as.numeric(substr(hora_minuto, 3, 4))/10))
gg <- dplyr::summarise(g, hora_minuto = dplyr::first(hora_minuto),
irr_inv = round(mean(IRR, na.rm=TRUE), digits = 2),
massaPM1 = round(mean(massaPM1, na.rm=TRUE), digits = 2),
numPM1 = round(mean(numPM1, na.rm=TRUE), digits = 2),
massaPM2 = round(mean(massaPM2, na.rm=TRUE), digits = 2),
numPM2 = round(mean(numPM2, na.rm=TRUE), digits = 2),
tamanho_medio = round(mean(tamanho_medio, na.rm=TRUE), digits = 2),
temp = round(mean(temp, na.rm=TRUE), digits = 2),
vento_vel=round(mean(vento_vel, na.rm=TRUE), digits = 2),
vento_dir=round(mean(vento_dir, na.rm=TRUE), digits = 2),
P_AC = round(mean(P_AC, na.rm=TRUE), digits = 2),
P_DC = round(mean(P_DC, na.rm=TRUE), digits = 2),
I_AC = round(mean(I_AC, na.rm=TRUE), digits = 2),
V_AC = round(mean(V_AC, na.rm=TRUE), digits = 2),
I_DC = round(mean(I_DC, na.rm=TRUE), digits = 2),
V_DC = round(mean(V_DC, na.rm=TRUE), digits = 2),
massaPM4 = round(mean(massaPM4, na.rm=TRUE), digits = 2),
numPM4 = round(mean(numPM4, na.rm=TRUE), digits = 2),
massaPM10 = round(mean(massaPM10, na.rm=TRUE), digits = 2),
numPM10 = round(mean(numPM10, na.rm=TRUE), digits = 2),
rainfall = max(rainfall, na.rm=TRUE),
irr_est = round(mean(irr, na.rm=TRUE), digits = 2),
#DVr1 =  round(atan  (sum( -vento_vel * sind(vento_dir) ) / sum( -vento_vel * cosd(vento_dir) ) ), digits = 6),
#DVr2 =  round(atan2 (sum( -vento_vel * sind(vento_dir) ) , sum( -vento_vel * cosd(vento_dir) ) ), digits = 6),
#IDV1 =  round(1 + sin(atan  (sum( -vento_vel * sind(vento_dir) ) / sum( -vento_vel * cosd(vento_dir) ) ) - fi ), digits = 6),#-(-0.03313127))   )
#IDV2 =  round(1 + sin(atan2 (sum( -vento_vel * sind(vento_dir) ) , sum( -vento_vel * cosd(vento_dir) ) ) - fi ), digits = 6),
n = dplyr::n())
y <- gg
y$h <- NULL
y$m <- NULL
y$n <- NULL
# remove os NA e os -Inf dos datasets forcando eles a 0
is.na(y)<-sapply(y, is.infinite)
y[is.na(y)] <- 0
y
View(y)
subAno <- substring(y$dia_mes_ano, 1, 4)
subMes <- substring(y$dia_mes_ano, 5, 6)
subDia <- substring(y$dia_mes_ano, 7, 8)
y$hora_minuto <- str_pad(y$hora_minuto, 6, pad = "0")
subHora <- substring(y$hora_minuto, 1, 2)
subMin  <- substring(y$hora_minuto, 3, 4)
subSeg  <- substring(y$hora_minuto, 5, 6)
subMin[1]
subMin
if (as.numeric(subMin[1]) >= 01 && as.numeric(subMin[1]) < 09 ){
subMin[1] <- "00"
}
subMin
TempoAmostra <- paste(subAno, "-", subMes, "-", subDia, " " ,subHora, ":", subMin, ":", subSeg ,sep = "")
y$Data <- strptime(TempoAmostra, format = "%Y-%m-%d %H:%M:%OS")
aux_temp <- y$Data+540
aux_temp
aux_hora <- substring(aux_temp, 12, 13)
aux_min <- substring(aux_temp, 15, 16)
aux_seg <- substring(aux_temp, 18, 19)
aux_final <- paste(aux_hora, aux_min, aux_seg, sep = "")
y$hora_minuto <- aux_final
y$Data <- NULL
aux_final
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
pasta_estacao <- "D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\tabelas_teste\\05_interpola_est\\"
# bloco para leitura dos arquivos .csvs do inversor
caminho_estacao <- setwd(pasta_estacao)
caminho_estacao <- setwd(pasta_estacao)
nomes_arq_estacao <- list.files(pattern = "*.csv")
arquivos_estacao <- paste(caminho_estacao,  "/", nomes_arq_estacao, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia_mes_ano", "hora_minuto", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
arq_final_diario <- c()
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_inicial <- NULL
z_merge_total <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
dia_atual = 1
dia_inicio = 1
cont_dias <- NULL
hora_quebra <- 1
dia_atual <- 78
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
dataset_temp
View(dataset_temp)
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
dataset_save
dataset_aux
View(dataset_aux)
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
pasta_estacao <- "D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\tabelas_teste\\05_interpola_est\\"
# bloco para leitura dos arquivos .csvs do inversor
caminho_estacao <- setwd(pasta_estacao)
caminho_estacao <- setwd(pasta_estacao)
nomes_arq_estacao <- list.files(pattern = "*.csv")
arquivos_estacao <- paste(caminho_estacao,  "/", nomes_arq_estacao, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia_mes_ano", "hora_minuto", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
arq_final_diario <- c()
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_inicial <- NULL
z_merge_total <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
dia_atual = 1
dia_inicio = 1
cont_dias <- NULL
hora_quebra <- 1
dia_atual <- 78
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
dataset_temp
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
temp10_minutos
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
temp10_minutos
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
temp10_minutos
dataset_teste <- temp10_minutos
int_amostra <- nrow(temp10_minutos)
dataset_teste
int_amostra
int_amostra == 1
as.numeric(dataset_teste$hora_minuto[1])
as.numeric(dataset_teste$hora_minuto[1]) == 213000
if( int_amostra == 1 && as.numeric(dataset_teste$hora_minuto[1]) == 213000){
dataset_teste$hora_minuto[int_amostra] <- "213900"
}
dataset_teste
source('D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R')
dia_atual
source('D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R')
source('D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R')
source('D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R')
source('D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R')
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
pasta_estacao <- "D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\tabelas_teste\\05_interpola_est\\"
# bloco para leitura dos arquivos .csvs do inversor
caminho_estacao <- setwd(pasta_estacao)
caminho_estacao <- setwd(pasta_estacao)
nomes_arq_estacao <- list.files(pattern = "*.csv")
arquivos_estacao <- paste(caminho_estacao,  "/", nomes_arq_estacao, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia_mes_ano", "hora_minuto", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
arq_final_diario <- c()
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_inicial <- NULL
z_merge_total <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
dia_atual = 1
dia_inicio = 1
cont_dias <- NULL
hora_quebra <- 1
dia_atual <- 78
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
dataset_temp
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
dataset_aux
View(dataset_aux)
temp10_minutos
dataset_teste
amostras
linha
temp10_minutos
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
linha
temp10_minutos
dataset_teste <- temp10_minutos
int_amostra <- nrow(temp10_minutos)
dataset_teste
dataset_aux
dataset_teste
dataset_teste
dataset_teste$hora_minuto[int_amostra]
int_amostra == 1 && as.numeric(dataset_teste$hora_minuto[1]) == 213000
dataset_teste$hora_minuto[int_amostra]
dataset_teste
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
dataset_teste
linha
dataset_temp$hora_minuto[linha]
dataset_temp$hora_minuto[linha]) %% 1000 != 0
dataset_temp$hora_minuto[linha]) %% 1000 != 0
as.numeric(dataset_temp$hora_minuto[linha]) %% 1000
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}else{
#      break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
}
temp10_minutos
dataset_teste
temp10_minutos
temp10_minutos
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}else{
#      break
#  source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
temp10_minutos
int_amostra
dataset_teste
cont_dias <- (dia_atual - 1)*24
dataset_temp <- readr::read_csv(nomes_arq_estacao[dia_atual], col_types = cols(hora_minuto = col_character()))
dataset_temp$X1 <- NULL
amostras <- nrow(dataset_temp)
linha <- 1
temp10_minutos <- NULL
dia <- dataset_temp$dia_mes_ano[1]
for (linha in 1:amostras){
if (as.numeric(dataset_temp$hora_minuto[linha]) %% 1000 != 0){
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}else{
#      break
#  source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
temp10_minutos <- NULL
temp10_minutos <- bind_rows(temp10_minutos, dataset_temp[linha,])
}
if (linha == amostras){
#        break
source("D:\\github\\Tabelas_DynamoDB\\csv_para_analise\\08b_calculaSerieTemporal.R")
}
}
dataset_teste
int_amostra
source("D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R")
source("D:/github/Tabelas_DynamoDB/csv_para_analise/09_combinacaofinal.R")
source("D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R")
source("D:/github/Tabelas_DynamoDB/csv_para_analise/09_combinacaofinal.R")
source('D:/github/Tabelas_DynamoDB/csv_para_analise/99_todosDiasCsvs.R')
source("D:/github/Tabelas_DynamoDB/csv_para_analise/08a_quebraDataSet.R")
source("D:/github/Tabelas_DynamoDB/csv_para_analise/09_combinacaofinal.R")
source('D:/github/Tabelas_DynamoDB/csv_para_analise/99_todosDiasCsvs.R')
source('D:/github/Tabelas_DynamoDB/csv_para_analise/99_todosDiasCsvs.R')
